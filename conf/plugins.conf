glassdoor.defaultPlugins = [
	{
		name = "apk"
		type = "loader"
		dependencies = []
		changes = ["original-binary.apk"]
		commands = ["load"]
		classFile = "io.glassdoor.plugin.plugins.loader.apk.ApkLoader"
    help = """
A simple command to load local apk files into context.

Usage:
apk FILEPATH

Data:
changes -> original-binary.apk

Example:
apk /home/test/test.apk
"""
	},
	{
		name = "extractor"
		type = "preprocessor"
		dependencies = ["dynamic"]
		changes = ["dynamic"]
		commands = ["extract"]
		classFile = "io.glassdoor.plugin.plugins.preprocessor.extractor.Extractor"
		help = """
Allows to extract data matching a given regex from the file at the given context to the given context. Assumes that the file is zip compliant.

Usage:
extractor REGEX SRC-CONTEXT DEST-CONTEXT

Data:
depends -> SRC-CONTEXT
changes -> DEST-CONTEXT

Example:
extractor ^.*\\.[Dd][Ee][Xx]$ original-binary.apk intermediate-assembly.dex
"""
	},
	{
		name = "db-extractor"
		type = "preprocessor"
		dependencies = ["dynamic"]
		changes = ["dynamic"]
		commands = ["extract"]
		classFile = "io.glassdoor.plugin.plugins.preprocessor.database.DatabaseExtractor"
		help = """
Extracts data from a sqlite database to a plain text file and saves the result to the given context.

Usage:
db-extractor [OPTIONS] SRC-CONTEXT DEST-CONTEXT

Commandline-Options:
  -subfile|-s: specify a subfile for the input context

Data:
depends -> SRC-CONTEXT
changes -> DEST-CONTEXT

Example:
db-extractor -s assets/test.sqlite intermediate-assembly.databases result-log.extracted-databases
"""
	},
	{
		name = "smali"
		type = "preprocessor"
		dependencies = ["intermediate-assembly.dex"]
		changes = ["intermediate-assembly.smali"]
		commands = ["disassemble"]
		classFile = "io.glassdoor.plugin.plugins.preprocessor.smali.SmaliDisassembler"
		help = """
Automatically extracts dex classes found in the context to smali files.

Usage:
smali

Data:
depends -> intermediate-assembly.dex
changes -> intermediate-assembly.smali

Example:
smali
"""
	},
	{
		name = "java"
		type = "preprocessor"
		dependencies = ["original-binary.apk"]
		changes = ["intermediate-source.java"]
		commands = ["decompile"]
		classFile = "io.glassdoor.plugin.plugins.preprocessor.java.JavaDecompiler"
		help = """
Command to decompile the apk found in original-binary. apk to java code.

Usage:
java

Data:
depends -> original-binary.apk
changes -> intermediate-source.java

Example:
java
"""
	},
	{
		name = "regex"
		type = "analyser"
		dependencies = ["dynamic"]
		changes = ["result-log"]
		commands = ["analyse"]
		classFile = "io.glassdoor.plugin.plugins.analyser.regex.RegexAnalyser"
		help = """
Command to extract strings matching the given regex from the given context.

Usage:
regex [FLAGS] [OPTIONS] SRC-CONTEXT DEST-CONTEXT

Commandline-Options:
  -input|-i: input context to read regexes from. performs regex search using each line. if specified context is not directly linking to a file, also use -s.
  -subfile|-s: specify a subfile for the given input context relative to its path.
  -regex|-r: directly specify a single regex to use

Commandline-Flags:
  ++only-matching|+o: only save the part matching the regex into the result log, not the whole line.
  ++no-filename|+h: do not save the filename in the resultlog
  ++line-number|+n: save the linenumber next to each match in the result-log
  ++ignore-case|+i: ignore the case when matching the regex
  ++print-headers|+j: prints headers before each regex search specifying which regex was used against which context
  ++fixed-strings|+F: treat the input as normal string(s) and not as regexes
  ++silver-searcher|+S: use silver searcher as backend instead of grep
  ++overwrite|+w: overwrites the file in result-log (useful for filtering regex results again)

Example:
regex +Soh -i resource.dictionary.glassdoor -s emails.txt intermediate-source.java result-log.regex-email

Data:
depends -> SRC-CONTEXT
changes -> result-log.DEST-CONTEXT
"""
	},
	{
		name = "hashcrack"
		type = "analyser"
		dependencies = ["result-log.regex-hashes", "dynamic"]
		changes = ["result-log.hashcrack"]
		commands = ["analyse"]
		classFile = "io.glassdoor.plugin.plugins.analyser.hash.HashCracker"
		help = """
Cracks the given hash(es) using either john or hashcat as backend.

Usage:
hashcrack [FLAGS] [OPTIONS] DICT-CONTEXT SRC-CONTEXT

Commandline-Options:
  -format|-f: specifies the hash format. possible options: md5
  -dictionary-file|-d: specifies a subfile for the dictionary context using a relative path.

Commandline-Flags:
  ++single-hash|+s: only specify a single hash instead of an input file

Data:
depends -> SRC-CONTEXT
changes -> result-log.hashcrack

Example:
hashcrack -f md5 -d Passwords/merged.txt resource.dictionary.seclists result-log.regex-hashes
"""
	},
	{
		name = "git"
		type = "installer"
		dependencies = []
		changes = []
		commands = ["load"]
		classFile = "io.glassdoor.plugin.plugins.installer.git.GitInstaller"
		help = ""
	},
	{
		name = "show"
		type = "meta"
		dependencies = ["dynamic"]
		changes = []
		commands = ["show"]
		classFile = "io.glassdoor.plugin.plugins.meta.show.ShowValue"
		help = """
Displays the current value of the given context.

Usage:
show CONTEXT

Data:
depends -> CONTEXT

Example:
show original-binary.apk
"""
	}
]
