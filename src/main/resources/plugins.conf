glassdoor.defaultPlugins = [
	{
		name = "apk"
		type = "loader"
		dependencies = []
		changes = ["original-binary.apk"]
		commands = ["load"]
		classFile = "io.glassdoor.plugin.plugins.loader.apk.ApkLoader"
    help = """
A simple command to load local apk files into context.

Usage:
apk FILEPATH

Data:
changes -> original-binary.apk

Example:
apk /home/test/test.apk
"""
	},
	{
		name = "extractor"
		type = "preprocessor"
		dependencies = ["dynamic"]
		changes = ["dynamic"]
		commands = ["extract"]
		classFile = "io.glassdoor.plugin.plugins.preprocessor.extractor.Extractor"
		help = """
Allows to extract data matching a given regex from the file at the given context to the given context. Assumes that the file is zip compliant.

Usage:
extractor REGEX SRC-CONTEXT DEST-CONTEXT

Data:
depends -> SRC-CONTEXT
changes -> DEST-CONTEXT

Example:
extractor ^.*\\.[Dd][Ee][Xx]$ original-binary.apk intermediate-assembly.dex
"""
	},
	{
		name = "db-extractor"
		type = "preprocessor"
		dependencies = ["dynamic"]
		changes = ["dynamic"]
		commands = ["extract"]
		classFile = "io.glassdoor.plugin.plugins.preprocessor.database.DatabaseExtractor"
		help = """
Extracts data from a sqlite database to a plain text file and saves the result to the given context.

Usage:
db-extractor [OPTIONS] SRC-CONTEXT DEST-CONTEXT

Commandline-Options:
  -subfile|-s: specify a subfile for the input context

Data:
depends -> SRC-CONTEXT
changes -> DEST-CONTEXT

Example:
db-extractor -s assets/test.sqlite intermediate-assembly.databases result-log.extracted-databases
"""
	},
	{
		name = "smali"
		type = "preprocessor"
		dependencies = ["intermediate-assembly.dex"]
		changes = ["intermediate-assembly.smali"]
		commands = ["disassemble"]
		classFile = "io.glassdoor.plugin.plugins.preprocessor.smali.SmaliDisassembler"
		help = """
Automatically extracts dex classes found in the context to smali files.

Usage:
smali

Data:
depends -> intermediate-assembly.dex
changes -> intermediate-assembly.smali

Example:
smali
"""
	},
	{
		name = "java"
		type = "preprocessor"
		dependencies = ["original-binary.apk"]
		changes = ["intermediate-source.java"]
		commands = ["decompile"]
		classFile = "io.glassdoor.plugin.plugins.preprocessor.java.JavaDecompiler"
		help = """
Command to decompile the apk found in original-binary.apk to java code.

Usage:
java

Data:
depends -> original-binary.apk
changes -> intermediate-source.java

Example:
java
"""
	},
	{
		name = "regex"
		type = "analyser"
		dependencies = ["dynamic"]
		changes = ["result-log"]
		commands = ["analyse"]
		classFile = "io.glassdoor.plugin.plugins.analyser.regex.RegexAnalyser"
		help = """
Command to extract strings matching the given regex from the given context.

Usage:
regex [FLAGS] [OPTIONS] SRC-CONTEXT DEST-CONTEXT

Commandline-Options:
  -input|-i: input context to read regexes from. performs regex search using each line. if specified context is not directly linking to a file, also use -s.
  -subfile|-s: specify a subfile for the given input context relative to its path.
  -regex|-r: directly specify a single regex to use

Commandline-Flags:
  ++only-matching|+o: only save the part matching the regex into the result log, not the whole line.
  ++no-filename|+h: do not save the filename in the resultlog
  ++line-number|+n: save the linenumber next to each match in the result-log
  ++ignore-case|+i: ignore the case when matching the regex
  ++print-headers|+j: prints headers before each regex search specifying which regex was used against which context
  ++fixed-strings|+F: treat the input as normal string(s) and not as regexes
  ++silver-searcher|+S: use silver searcher as backend instead of grep
  ++overwrite|+w: overwrites the file in result-log (useful for filtering regex results again)

Example:
regex +Soh -i resource.dictionary.glassdoor -s emails.txt intermediate-source.java result-log.regex-email

Data:
depends -> SRC-CONTEXT
changes -> result-log.DEST-CONTEXT
"""
	},
	{
		name = "hashcrack"
		type = "analyser"
		dependencies = ["dynamic"]
		changes = ["result-log.hashcrack"]
		commands = ["analyse"]
		classFile = "io.glassdoor.plugin.plugins.analyser.hash.HashCracker"
		help = """
Cracks the given hash(es) using either john or hashcat as backend.

Usage:
hashcrack [FLAGS] [OPTIONS] DICT-CONTEXT SRC-CONTEXT

Commandline-Options:
  -format|-f: specifies the hash format. possible options: md5
  -dictionary-file|-d: specifies a subfile for the dictionary context using a relative path.

Commandline-Flags:
  ++single-hash|+s: only specify a single hash instead of an input file

Data:
depends -> SRC-CONTEXT
changes -> result-log.hashcrack

Example:
hashcrack -f md5 -d Passwords/merged.txt resource.dictionary.seclists result-log.regex-hashes
"""
	},
	{
		name = "git"
		type = "installer"
		dependencies = []
		changes = ["dynamic"]
		commands = ["load"]
		classFile = "io.glassdoor.plugin.plugins.installer.git.GitInstaller"
		help = ""
	},
	{
		name = "show"
		type = "meta"
		dependencies = ["dynamic"]
		changes = []
		commands = ["show"]
		classFile = "io.glassdoor.plugin.plugins.meta.show.ShowValue"
		help = """
Displays the current value of the given context.

Usage:
show CONTEXT

Data:
depends -> CONTEXT

Example:
show original-binary.apk
"""
	},
	{
		name = "emulator"
		type = "emulator"
		dependencies = []
		changes = ["dynamic-analysis.emulator"]
		commands = ["run"]
		classFile = "io.glassdoor.plugin.plugins.emulator.Emulator"
		help = """
Runs an Android emulator and saves a "true" inside the context to tell other plugins, that the emulator is running.

Usage:
emulator [SYSTEM IMAGE]

Data:
changes -> dynamic-analysis.emulator

Example:
emulator
emulator /home/glassdoor/custom_system.img
"""
	},
	{
		name = "mitm"
		type = "network"
		dependencies = []
		changes = ["dynamic-analysis.mitm", "result-log.mitm"]
		commands = ["start", "stop"]
		classFile = "io.glassdoor.plugin.plugins.network.mitm.MitmProxy"
		help = """
Starts a man-in-the-middle proxy and saves the port it is running on in context.
When stopped, the retrieved log will be saved in context and the port in context will be set to an empty string.
If no command and no options are specified, the default is to start a proxy at port 8989.

Usage:
mitm COMMAND [OPTIONS]

Commands:
  start: start a mitm proxy
  stop: stop the currently running proxy and save the log in context.

Commandline-Options:
  -port|-p: specify a port to use

Data:
changes -> dynamic-analysis.mitm
changes -> result-log.mitm

Example:
mitm start -p 8787
mitm stop
"""
	},
	{
		name = "adb"
		type = "utility"
		dependencies = []
		changes = []
		commands = ["run"]
		classFile = "io.glassdoor.plugin.plugins.emulator.adb.Adb"
		help = """
Runs the given adb command on the Android emulator.

Usage:
adb

Data:

Example:
adb whoami
"""
	},
	{
		name = "tracer"
		type = "tracer"
		dependencies = ["dynamic-analysis.emulator", "dynamic"]
		changes = ["dynamic-analysis.tracer", "result-log.tracer"]
		commands = ["run"]
		classFile = "io.glassdoor.plugin.plugins.tracer.Tracer"
		help = """
Traces the system calls of the given application on the Android emulator.
If no package name is given, it will use the package name found in the result.log file found in the directory stored in result-log.package-name.

Usage:
tracer COMMAND [PACKAGENAME]

Data:
depends -> dynamic-analysis.emulator
depends -> [result-log.package-name]
changes -> dynamic-analysis.tracer
changes -> result-log.tracer

Commands:
  start: start tracing system calls of the application with the given/found package name
  stop: stop the currently running tracer

Example:
tracer start io.glassdoor.testapplication
tracer start
tracer stop
"""
	},
	{
		name = "install"
		type = "load"
		dependencies = ["original-binary.apk", "dynamic-analysis.emulator"]
		changes = ["dynamic-analysis.install"]
		commands = ["run"]
		classFile = "io.glassdoor.plugin.plugins.loader.apk.ApkInstaller"
		help = """
Installs the apk stored inside original-binary.apk on the running Android emulator.

Usage:
install

Data:
depends -> original-binary.apk
depends -> dynamic-analysis.emulator

Example:
install
"""
	},
	{
		name = "aapt"
		type = "analyser"
		dependencies = ["original-binary.apk"]
		changes = ["dynamic"]
		commands = ["run"]
		classFile = "io.glassdoor.plugin.plugins.analyser.aapt.Aapt"
		help = """
Allows extracting infos from the apk stored inside original-binary.apk.
Uses the aapt utility from the Android build tools.
For now it can only dump information.

Usage:
aapt [COMMAND] [OPTIONS] [DEST-CONTEXT]

Commands:
  dump: dumps information from the apk. needs additional parameter
        specifying the information to dump:
          strings: strings of the application
          badging: package info
          permissions: permissions of the app
          resources: resource table of the apk
          configurations: configs found in the apk
          xmltree: compiled xmls
          xmlstrings: strings of the compiled xmls

Data:
depends -> original-binary.apk
changes -> DEST-CONTEXT

Example:
aapt dump badging result-log.package-info
aapt dump resources result-log.resources
aapt dump string result-log.strings
"""
	},
	{
		name = "launch"
		type = "emulator"
		dependencies = ["dynamic-analysis.emulator", "dynamic"]
		changes = []
		commands = ["launch"]
		classFile = "io.glassdoor.plugin.plugins.emulator.Launcher"
		help = """
Starts the application with the specified package name on the emulator.
If no package name is specified, the package name will be loaded from context
using the result-log.package-name key.

Usage:
launch [PACKAGE-NAME]

Data:
depends -> [result-log.package-name]

Example:
launch
launch io.glassdoor.testapplication
"""
	},
	{
		name = "monkey"
		type = "ui"
		dependencies = ["dynamic-analysis.emulator", "dynamic"]
		changes = ["dynamic-analysis.ui"]
		commands = ["start", "stop"]
		classFile = "io.glassdoor.plugin.plugins.ui.Monkey"
		help = """
Performs random ui tests on the given application on the running Android emulator.
If no package name is given, it will use the package name found in the result.log file found in the directory stored in result-log.package-name.

Usage:
monkey COMMAND [PACKAGENAME]

Data:
depends -> dynamic-analysis.emulator
depends -> [result-log.package-name]
changes -> dynamic-analysis.ui

Commands:
  start: start monkey testing the application with the given/found package name
  stop: stop the currently running monkey test

Example:
monkey start io.glassdoor.testapplication
monkey start
monkey stop
"""
	}
]
